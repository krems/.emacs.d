#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "mpi.h"

#define ALIVE 'X'
#define DEAD '.'

void fill_tmp_grid_and_buf(char* tmp_grid, char* phantom_up,
                           char* phantom_bottom, char* buf, int N,
                           size_t chunk_size) {
  char* dest = tmp_grid;
  strncpy(dest, phantom_up, N);
  dest += N;
  char* tmp = (char*) malloc(chunk_size * sizeof(char));
  strncpy(tmp, dest, chunk_size);
  strncpy(dest, buf, chunk_size);
  dest += chunk_size;
  strncpy(buf, tmp, chunk_size);
  free(tmp);
  strncpy(dest, phantom_bottom, N);
  dest += N;
}

int toindex(int row, int col, int N) {
  if (row < 0) {
    row = row + N;
  } else if (row >= N) {
    row = row - N;
  }
  if (col < 0) {
    col = col + N;
  } else if (col >= N) {
    col = col - N;
  }
  return row * N + col;
}

void printgrid(char* grid, char* buf, FILE* f, int N) {
  for (int i = 0; i < N; ++i) {
    strncpy(buf, grid + i * N, N);
    buf[N] = 0;
    fprintf(f, "%s\n", buf);
  }
}

int main(int argc, char* argv[]) {
  if (argc != 5) {
    fprintf(stderr, "Usage: %s N input_file iterations output_file\n", argv[0]);
    return 1;
  }

  int N = atoi(argv[1]); // grid size
  int iterations = atoi(argv[3]);
  double start_time = 0.0;
  double end_time = 0.0;
    
  int rc = MPI_Init(&argc,&argv);
  if (rc != MPI_SUCCESS) {
    printf ("Error starting MPI program. Terminating.\n");
    MPI_Abort(MPI_COMM_WORLD, rc);
  }
  int rank, numtasks;
  MPI_Comm_size(MPI_COMM_WORLD,&numtasks);
  MPI_Comm_rank(MPI_COMM_WORLD,&rank);

  char* grid;
  if (rank == 0) {
    start_time = MPI_WTime();
    FILE* input = fopen(argv[2], "r");
    grid = (char*) malloc(N * N * sizeof(char));
    for (int i = 0; i < N; ++i) {
      fscanf(input, "%s", grid + i * N);
    }
    fclose(input);
  }
  size_t chunk_size = N * N * sizeof(char) / numtasks;
  char* buf = (char*) malloc(chunk_size);
  char* tmp_grid = (char*) malloc(chunk_size + 2 * N);
  char* phantom_bottom = (char*) malloc(N);
  char* phantom_up = (char*) malloc(N);
  // Start of parallel section
  MPI_Scatter(grid, chunk_size, MPI_CHAR, buf, chunk_size,
              MPI_CHAR, 0, MPI_COMM_WORLD);
    for (int iter = 0; iter < iterations; ++iter) {
      MPI_Status status;
      int dest = rank - 1;
      if (rank == 0) {
        dest = numtasks - 1;
      }
      int source = rank + 1;
      if (rank == numtasks - 1) {
        source = 0;
      }
      MPI_Sendrecv (buf, N, MPI_CHAR, dest, 0, 
                    phantom_bottom, N, MPI_CHAR, source, 0, 
                    MPI_COMM_WORLD, &status);
      dest = rank + 1;
      if (rank == numtasks - 1) {
        dest = 0;
      }
      source = rank - 1;
      if (rank == 0) {
        source = numtasks - 1;
      }
      MPI_Sendrecv (buf + chunk_size - N, N, MPI_CHAR, dest, 0, 
                    phantom_up, N, MPI_CHAR, source, 0, 
                    MPI_COMM_WORLD, &status);
      fill_tmp_grid_and_buf(tmp_grid, phantom_up, phantom_bottom, buf,
                            N, chunk_size);
        for (int i = 0; i < chunk_size / N; ++i) {
            for (int j = 0; j < N; ++j) {
                int alive_count = 0;
                for (int di = -1; di <= 1; ++di) {
                    for (int dj = -1; dj <= 1; ++dj) {
                        if ((di != 0 || dj != 0) &&
                            tmp_grid[toindex(i + di, j + dj, N)] == ALIVE) {
                          ++alive_count;
                        }
                    }
                }
                int current = i * N + j;
                if (alive_count == 3 ||
                    (alive_count == 2 && tmp_grid[current] == ALIVE)) {
                  buf[current] = ALIVE;
                } else {
                  buf[current] = DEAD;
                }
            }
        }     
        MPI_Barrier(MPI_COMM_WORLD);
    }
    MPI_Gather(&buf, chunk_size, MPI_CHAR, &grid, N * N * sizeof(char),
               MPI_CHAR, 0, MPI_COMM_WORLD); 
    // End of parallel section
    free(tmp_grid);
    free(buf);
    if (rank == 0) {
      FILE* output = fopen(argv[4], "w");
      printgrid(grid, buf, output, N);
      fclose(output);
      
      free(grid);

      end_time = MPI_WTime();
      fprintf(stdout, "Hi!\n");
      /* char info_addr[200]; */
      /* sprintf(info_addr, "/home/ovchinnikov/life_out/info%d", numtasks); */
      /* FILE* info = fopen(info_addr, "w"); */
      /* fprintf(info, "N: %d\tIterations: %zu\t Time: %f\n", */
      /*        N, iterations, end_time - start_time); */
      /* fclose(info); */
    }
    MPI_Finalize();
    //    fprintf(stderr, "N: %d\tIterations: %zu\t Time: %f\n",
    //       N, iterations, end_time - start_time);
    return 0;
}
