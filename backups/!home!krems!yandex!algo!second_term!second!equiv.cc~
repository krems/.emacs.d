// Author: Valeriy Ovchinnikov

#include <iostream>
#include <stdio.h>
#include <vector>

using std::cin;
using std::cout;
using std::vector;


// Start state'll be a state in states[0]
class Automata {
  class State {
   public:
    vector<size_t> rules;
    bool isTerminal;
    size_t id; // Neccessary?
    
    State(size_t rulesNumber) {
      rules.resize(rulesNumber);
    }
  };
  size_ rulesNumber;
 public:
  vector<State> states;

  Automata(size_t statesNumber, size_t rulesNumber) {
    this->rulesNumber = rulesNumber;
    for (size_t i = 0; i < statesNumber; ++i) {
      states.push_back(State(rulesNumber));
    }
  }
  
  void createRule(size_t stateFrom, size_t edgeLetter, size_t stateTo) {
    states[stateFrom].rules[edgeLetter] = stateTo;
  }

  void markStateTerminal(size_t state) {
    states[state].isTerminal = true;
  }

  size_t getStatesNumber() {
    return states.size();
  }

  size_t getRulesNumber() {
    return rulesNumber;
  }
};

size_t getNumberNyChar(char edge) {
  return edge - 97;
}

Automata createAutomata() {
  size_t statesNumber;
  size_t terminalsNumber;
  size_t rulesNumber;
  cin >> statesNumber >> terminalsNumber >> rulesNumber;
  Automata automata(statesNumber, rulesNumber);
  for (size_t i = 0; i < terminalsNumber; ++i) {
    size_t state;
    cin >> state;
    automata.markStateTerminal(state);
  }
  for (size_t i = 0; i < statesNumber * rulesNumber; ++i) {
    size_t from;
    size_t to;
    char edge;
    cin >> from;
    cin >> edge;
    cin >> to;
    automata.createRule(from, getNumberNyChar(edge), to);
  }
  return automata;
}

size_t calculateMinimalStatesNumber(Automata& automata) {
  table[cur][to][rule][state];
  for (size_t state = 0; state < automata.getStatesNumber(); ++state) {
    for (size_t comparedState = 0; comparedState < automata.getStatesNumber();
         ++comparedState) {
      if (state == comparedState) {
        // TODO: inplement
        continue;
      }
      if (automata.states[state].isTerminal() &&
          automata.states[comparedState].isTerminal()) {
        // TODO: implement
        continue;
      }
      for (size_t rule = 0; rule < automata.getRulesNumber(); ++rules) {
        // TOFO: implement
      }
    }
  }
  return 0;
}

int main() {
  Automata automata(createAutomata());
  size_t minimalStatesNumber = calculateMinimalStatesNumber(automata);
  cout << minimalStatesNumber << std::endl;
  return 0;
}
