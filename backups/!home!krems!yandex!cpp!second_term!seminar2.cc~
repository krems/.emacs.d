#include <iostream>
#include <vector>

using std::vector;
using std::cout;
using std::endl;

template <typename T>
class Holder {
  T* innerPtr;
  
 public:
  Holder(T* toHold): innerPtr(toHold) {}

  T& operator * () const {
    return *innerPtr;
  }

  T* operator -> () const {
    return innerPtr;
  }
  
  ~Holder() {
    delete T;
  }

 private:
  Holder& operator () (const Holder&) {}
  Holder& operator = (const Holder&) {}
}

  int main() {
    Holder holder(new vector<int>);
    holder->push_back(3);
    cout << *holder << endl;
    return 0;
  }
