// Author: Valeriy Ovchinnikov

#include <stdio.h>
#include <math.h>

#define T long long int

T get_mask(size_t pos) {
  return 1 << pos;
}

int main() {
  size_t bitrate = 8 * sizeof(T);
  long long int top_number;
  scanf("%lld", &top_number); // U should add check value here
  // Every bit is a number in a row from 1 to top_number. If bit is up(=1) then
  // It is removed(as a non-prime number)
  T num_row[top_number / bitrate + 1];
  for (size_t i = 0; i <= top_number / bitrate; ++i) {
    num_row[i] = 0;
  }
  for (long long int i = 2; i <= sqrt((double)top_number); ++i) {
    T mask = get_mask((size_t)(i % bitrate));
    if (!(num_row[(size_t)(i / bitrate)] & mask)) { // If not already removed
      for (long long int j = 2 * i; j <= top_number; j += i) { // Go remove 'em
        T mask = get_mask((size_t)(j % bitrate));
        num_row[(size_t)(j / bitrate)] |= mask;
      }
    }
  }
  T primes_number = 0;
  for (long long int i = 0; i <= top_number; ++i) {
    T mask = get_mask((size_t)(i % bitrate));
    if (!(num_row[(size_t)(i / bitrate)] & mask)) {
      //      printf("%lld ", i);               // Delete this line on release
      ++primes_number;
    }
  }
  printf("\n%lld\n", primes_number - 2);
  return 0;
}
