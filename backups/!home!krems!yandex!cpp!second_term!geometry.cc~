#include <iostream>
#include <typeinfo>

using std::cout;
using std::cin;
using std::endl;

class Triangle;
class Square;
class Circle;

class Shape {
 public:
  virtual void draw() {
    cout << "Shape" << endl;
  }

  void rttiDraw() {
    Triangle* triangle = dynamic_cast<Triangle*>(this);
    if (triangle) {
      triangle->childDraw();
      return;
    }
    Square* square = dynamic_cast<Square*>(this);
    if (square) {
      square->childDraw();
      return;
    }
    Circle* circle = dynamic_cast<Circle*>(this);
    if (circle) {
      circle->childDraw();
      return;
    }
    throw new std::bad_cast;
  }
};

class Square: public Shape {
 public:
  void draw() {
    cout << "Square" << endl;
    for (size_t i = 0; i < 1000000; ++i);
  }

  void childDraw() {
    cout << "Square" << endl;
    for (size_t i = 0; i < 1000000; ++i);
  }
};

class Triangle: public Shape {
 public:
  void draw() {
    cout << "Triangle" << endl;
    for (size_t i = 0; i < 1000000; ++i);
  }

  void childDraw() {
    cout << "Triangle" << endl;
    for (size_t i = 0; i < 1000000; ++i);
  }
};

class Circle: public Shape {
 public:
  void draw() {
    cout << "Circle" << endl;
    for (size_t i = 0; i < 1000000; ++i);
  }

  void childDraw() {
    cout << "Circle" << endl;
    for (size_t i = 0; i < 1000000; ++i);
  }
};

int main() {
  Shape* shapes[] = {new Circle, new Triangle, new Square};
  for (size_t i = 0; i < 3; ++i) {
    shapes[i]->draw();
    // shapes[i]->rttiDraw();
  }
  return 0;
}
