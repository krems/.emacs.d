1) Избавимся от бесполезных и Nullable терминалов. Если не осталось
достижимых терминалов, очевидно, что ответ Impossible. 
2) Теперь приведем полученную грамматику к нормальной форме Хомского.
Если есть продукция вида:
          S -> $,
где S - начальный нетерминал, то ответ $.
3) Теперь грамматика имеет вид:
          A -> BC
          D -> a
B,C - не начальные нетерминалы.
Построим динамику:
Для каждого нетерминала будем хранить минимальную лексикографически
строку, которую можно получить из этого терминала, заданной длины l <
k. За базу возьмем продукцию вида:
          A -> a
Далее, чтобы получить для нетерминала A->BC минимальную строку длины l+1,
нужно перебрать минимальные строки длины [1,l] для нетерминалов B и C,
суммарной длины l+1, чтобы получить минимальную конкатенацию(такой 
конкатенации может и не оказаться).
Проделав эти действия для всех l = [1:k], рассмотрим все строки,
соответствующие нетерминалу S и выберем минимальную из них. Эта строка
и будет искомой.

Корректность:
Первые два пункта очевидны.
Так как мы рассматриваем только строки, получаемые из S, то все эти
строки могут быть получены из грамматики. Из всех возможных
конкатенаций заданной длины минимальной будет именно та, что
образована лексикографически минимальными частями заданной
длины. Таким образом, проходясь по всем таким конкатенациям и находя
минимальную, мы получаем именно минимальную строку из всех возможных.
База получается из набора переходов нетерминал->терминал, а так как
все такие переходы совершаются в один терминал, то база верна(l=1).

Оценка сложности:
Число нетерминалов(2^|G| - после приведения к форме Хомского)*число строк для левого нетерминала*число строк для
правого нетерминала*число итераций(k). Т.е. O(k^3 * 2^|G|) ~ 10^6 в
нашем случае.
По памяти: число нетерминалов(2^|G|)*длина строки(k)*количество
минимальных строк для нетерминала(k). Итого: O(2^|G|*k^2).
