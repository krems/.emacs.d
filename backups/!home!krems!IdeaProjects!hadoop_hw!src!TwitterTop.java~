import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Counters;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.mapreduce.Counter;

public class TwitterTop extends Configured implements Tool {

    public static enum AvarageCounters {
        USERS_COUNT,
        FOLLOWERS_COUNT
    }

    public static enum SpectrumCounters {
        ONE_TO_TEN,
        ELEVEN_TO_HUNDRED,
        HUNDRED_TO_THOUSAND,
        THOUSAND_TO_10000,
        TEN_THOUSAND_TO_100_THOUSAND
    }

    public static class TopMapper extends Mapper<Text, Text, Text, IntWritable> {

        private Text newKey = new Text();
        private IntWritable newValue = new IntWritable(1);

        @Override
        protected void map(Text key, Text value, Mapper.Context context)
                throws IOException, InterruptedException {
            newKey.set(key.toString());
            context.write(newKey, newValue);
            Counter cnt = context.getCounter(AvarageCounters.FOLLOWERS_COUNT);
            cnt.increment(1);
        }
    }

    public static class TopReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable value = new IntWritable(1);
        @Override
        protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException,
                InterruptedException {
            int sum = 0;
            Iterator<IntWritable> val = values.iterator();
            while (val.hasNext()) {
                sum += val.next().get();
            }
            trigSpectrumCounters(sum, context);
            value.set(sum);
            context.write(key, value);
        }

        private static void trigSpectrumCounters(int sum, Context context) {
            Counter cnt = null;
            if (sum < 11) {
                cnt = context.getCounter(SpectrumCounters.ONE_TO_TEN);
                cnt.increment(1);
                return;
            }
            if (sum < 101)  {
                cnt = context.getCounter(SpectrumCounters.ELEVEN_TO_HUNDRED);
                cnt.increment(1);
                return;
            }
            if (sum < 1001)  {
                cnt = context.getCounter(SpectrumCounters.HUNDRED_TO_THOUSAND);
                cnt.increment(1);
                return;
            }
            if (sum < 10001)  {
                cnt = context.getCounter(SpectrumCounters.THOUSAND_TO_10000);
                cnt.increment(1);
                return;
            }
            if (sum < 100001)  {
                cnt = context.getCounter(SpectrumCounters.TEN_THOUSAND_TO_100_THOUSAND);
                cnt.increment(1);
                return;
            }
        }
    }

    @Override
    public int run(String[] args) throws Exception {
        Configuration conf = getConf();
        if (args.length != 2) {
            System.err.println("Usage: TwitterTop <input_path> <output_path> ");
            System.exit(2);
        }

        Job job = new Job(conf);
        job.setJarByClass(TwitterTop.class);
        job.setJobName("twitter top");

        job.setMapperClass(TopMapper.class);
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(IntWritable.class);
        
        job.setCombinerClass(TopReducer.class);
        
        job.setReducerClass(TopReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        job.setInputFormatClass(KeyValueTextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        boolean success = job.waitForCompletion(true);

//        Counters counters = job.getCounters();
//
//        long ten = counters.findCounter(SpectrumCounters.ONE_TO_TEN).getValue();
//        long hundred = counters.findCounter(SpectrumCounters.ELEVEN_TO_HUNDRED).getValue();
//        long thousand = counters.findCounter(SpectrumCounters.HUNDRED_TO_THOUSAND).getValue();
//        long ten_thousand = counters.findCounter(SpectrumCounters.THOUSAND_TO_10000).getValue();
//        long lots = counters.findCounter(SpectrumCounters.TEN_THOUSAND_TO_100_THOUSAND).getValue();
//        System.out.println("1-10: " + ten + "\n" +
//                            "11-100: " + hundred + "\n" +
//                            "101-1000: " + thousand + "\n" +
//                            "1001-10000: " + ten_thousand + "\n" +
//                            "10001-100000: " + lots);
//
//        long followers = counters.findCounter(AvarageCounters.FOLLOWERS_COUNT).getValue();
//        long users = counters.findCounter(AvarageCounters.USERS_COUNT).getValue();
//        System.out.println("Avarage followers number is: " + (followers / users));

        return success ? 0 : 1;
    }

    public static void main(String[] args) throws Exception {
        int ret = ToolRunner.run(new TwitterTop(), args);
        System.exit(ret);
    }
}
